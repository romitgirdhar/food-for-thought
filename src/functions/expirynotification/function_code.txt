using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using Microsoft.Azure.Documents;
using Microsoft.Azure.Documents.Client;
using Newtonsoft.Json;
using Microsoft.Azure.NotificationHubs;

public static void Run(string myQueueItem, TraceWriter log)
{
    log.Info($"Received UserID: {myQueueItem}");
    var EndpointUri = System.Configuration.ConfigurationManager.AppSettings["DocDBEndpointUri"];
    var PrimaryKey = System.Configuration.ConfigurationManager.AppSettings["DocDBKey"];
    var databaseName = System.Configuration.ConfigurationManager.AppSettings["DocDBDBName"];
    var collectionName = System.Configuration.ConfigurationManager.AppSettings["DocDBCollectionName"];
    DocumentClient client = new DocumentClient(new Uri(EndpointUri), PrimaryKey);

    // Set some common query options
    FeedOptions queryOptions = new FeedOptions { MaxItemCount = -1 };

    // Here we find the Andersen family via its LastName
    IQueryable<GroceryList> userGrocery = client.CreateDocumentQuery<GroceryList>(
            UriFactory.CreateDocumentCollectionUri(databaseName, collectionName), queryOptions)
            .Where(f => f.id.Equals(myQueueItem));

    var tempGrocery = userGrocery.ToList();

    var grocerylist = from g in userGrocery.ToList().First().groceryItems
                      where g.ExpiryDate!=null && g.DateAdded!=null && g.ExpiryDate.CompareTo(DateTimeOffset.Now.AddDays(3).Date) <= 1
                      select g;
    
    foreach(var groceryItem in grocerylist)
    {
        SendNotificationAsync(myQueueItem, groceryItem.Name, groceryItem.ExpiryDate);
    }
    
    if(grocerylist.Count()>0)
    {
        log.Info($"Done sending notifications to User: {myQueueItem}");
    }
    else
    {
        log.Info($"No notifications to send to user: {myQueueItem}");
    }
     
     log.Info($"Exiting..."); 
}

private static async void SendNotificationAsync(string userId, string itemName, DateTimeOffset expiryDate)
{
    var NotificationHubsUri = System.Configuration.ConfigurationManager.AppSettings["NotificationHubsEndpoint"];
    var NotificationHubsName = System.Configuration.ConfigurationManager.AppSettings["NotificationHubsName"];
    
    NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(NotificationHubsUri, NotificationHubsName);
    await hub.SendGcmNativeNotificationAsync("{ \"data\" : {\"message\":\"Your "+itemName+" is about to expire on "+expiryDate.Date+"\"}}", userId);
}

class GroceryList
{
    public string id { get; set; }
    public List<GroceryItem> groceryItems { get; set; }
}

public class GroceryItem
{
    public string id { get; set; }
    public string Name { get; set; }
    public GroceryState State {get; set;}
    public DateTimeOffset DateAdded { get; set; }
    public int Quantity { get; set; }
    public string PictureUrl { get; set; }
    public DateTimeOffset ExpiryDate { get; set; }
    public string Upc { get; set; }

}

public enum GroceryState
{
     Listed, Bought, Consumed, Donated, Wasted
}